@EndUserText.label : 'CUSTOMER MASTER TABLE'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zcustomer_master {

  key client : abap.clnt not null;
  key id     : abap.char(5) not null;
  name       : abap.char(30) not null;
  address    : abap.char(10);

}

============================================================================================================================

@EndUserText.label : 'Credit Card Table'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zcredit_card {

  key client : abap.clnt not null;
  key id     : abap.char(5) not null;
  key cr_no  : abap.char(16) not null;
  issue_date : abap.dats not null;
  @Semantics.amount.currencyCode : 'zcredit_card.currency'
  cr_limit   : abap.curr(10,2) not null;
  currency   : abap.cuky not null;

}

================================================================================================================================


@EndUserText.label : 'TRANSACTION TABLE'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table ztransaction_cr {

  key client : abap.clnt not null;
  key tr_no  : abap.char(5) not null;
  key id     : abap.char(5) not null;
  key cr_no  : abap.char(16) not null;
  tr_date    : abap.dats not null;
  @Semantics.amount.currencyCode : 'zcredit_card.currency'
  amount     : abap.curr(10,2) not null;
  currency   : abap.cuky not null;

}

=================================================================================================================================


CLASS zcust_data_entry1 DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun.
    METHODS create_customer_data.
    METHODS flush_customer_data.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.


CLASS zcust_data_entry1 IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.
    flush_customer_data( ).
    create_customer_data( ).
    IF sy-subrc = 0.
      out->write( 'Customer data inserted successfully' ).
    ELSE.
      out->write( 'Failed to insert customer data' ).
    ENDIF.
  ENDMETHOD.

  METHOD create_customer_data.
    DATA: lt_customers TYPE TABLE OF zcustomer_master,
          wa_customer TYPE zcustomer_master.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0001'.
    wa_customer-name = 'Amit Sharma'.
    wa_customer-address = 'Delhi'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0002'.
    wa_customer-name = 'Priya Verma'.
    wa_customer-address = 'Mumbai'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0003'.
    wa_customer-name = 'Rahul Gupta'.
    wa_customer-address = 'Bengaluru'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0004'.
    wa_customer-name = 'Sneha Iyer'.
    wa_customer-address = 'Chennai'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0005'.
    wa_customer-name = 'Vikram Singh'.
    wa_customer-address = 'Hyderabad'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0006'.
    wa_customer-name = 'Neha Joshi'.
    wa_customer-address = 'Pune'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0007'.
    wa_customer-name = 'Suresh Kumar'.
    wa_customer-address = 'Kolkata'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0008'.
    wa_customer-name = 'Anjali Mehta'.
    wa_customer-address = 'Ahmedabad'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0009'.
    wa_customer-name = 'Manish Reddy'.
    wa_customer-address = 'Visakhapatnam'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0010'.
    wa_customer-name = 'Kavita Nair'.
    wa_customer-address = 'Kochi'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0011'.
    wa_customer-name = 'Rohan Patil'.
    wa_customer-address = 'Nagpur'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0012'.
    wa_customer-name = 'Divya Choudhary'.
    wa_customer-address = 'Jaipur'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0013'.
    wa_customer-name = 'Arjun Malhotra'.
    wa_customer-address = 'Chandigarh'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0014'.
    wa_customer-name = 'Swati Bansal'.
    wa_customer-address = 'Lucknow'.
    APPEND wa_customer TO lt_customers.

    CLEAR wa_customer.
    wa_customer-client = sy-mandt.
    wa_customer-id = 'C0015'.
    wa_customer-name = 'Harsh Vardhan'.
    wa_customer-address = 'Bhubaneswar'.
    APPEND wa_customer TO lt_customers.

    INSERT zcustomer_master FROM TABLE @lt_customers.
  ENDMETHOD.

  METHOD flush_customer_data.
    " Clear existing customer data
    DELETE FROM zcustomer_master.
  ENDMETHOD.

ENDCLASS.

=================================================================================================================================


CLASS zcust_credit_entry DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun.
    METHODS create_credit_data.
    METHODS flush_credit_data.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcust_credit_entry IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.
    out->write( 'Running' ).
    me->flush_credit_data( ).
    me->create_credit_data( ).
    out->write( 'Credit card data inserted successfully' ).
  ENDMETHOD.

  METHOD create_credit_data.
    DATA: lt_credit_cards TYPE TABLE OF zcredit_card,
          wa_credit_card  TYPE zcredit_card,
          lt_customers    TYPE TABLE OF zcustomer_master,
          wa_customer     TYPE zcustomer_master,
          o_rand_cc       TYPE REF TO cl_abap_random_int,
          o_rand_dt       TYPE REF TO cl_abap_random_int,
          o_rand_lim      TYPE REF TO cl_abap_random_int,
          o_rand_num      TYPE REF TO cl_abap_random_int,
          o_rand_part     TYPE REF TO cl_abap_random_int,
          lv_cc_part1     TYPE p LENGTH 8,
          lv_cc_part2     TYPE p LENGTH 8,
          lv_cc_num       TYPE p LENGTH 16,
          num_cards       TYPE i,
          lv_limit_base   TYPE i.

    " Initialize random number generators
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 2 max = 4 RECEIVING prng = o_rand_num ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 1 max = 2000 RECEIVING prng = o_rand_dt ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 10 max = 75 RECEIVING prng = o_rand_lim ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 10000000 max = 99999999 RECEIVING prng = o_rand_part ).

    " Fetch all customers
    SELECT * FROM zcustomer_master INTO TABLE @lt_customers.

    LOOP AT lt_customers INTO wa_customer.
      num_cards = o_rand_num->get_next( ).
      DO num_cards TIMES.
        CLEAR wa_credit_card.
        lv_cc_part1 = o_rand_part->get_next( ).
        lv_cc_part2 = o_rand_part->get_next( ).
        lv_cc_num = lv_cc_part1 * 100000000 + lv_cc_part2.

        " Ensure the credit limit ends in 000
        lv_limit_base = o_rand_lim->get_next( ) * 1000.

        wa_credit_card-client = sy-mandt.
        wa_credit_card-id = wa_customer-id.
        wa_credit_card-cr_no = lv_cc_num.
        wa_credit_card-issue_date = sy-datum - o_rand_dt->get_next( ).
        wa_credit_card-cr_limit = lv_limit_base.
        wa_credit_card-currency = 'INR'.
        APPEND wa_credit_card TO lt_credit_cards.
      ENDDO.
    ENDLOOP.

    INSERT zcredit_card FROM TABLE @lt_credit_cards.
  ENDMETHOD.

  METHOD flush_credit_data.
    " Clear existing credit card data
    DELETE FROM zcredit_card.
  ENDMETHOD.

ENDCLASS.

=====================================================================================================================================================

CLASS zcust_credit_transaction DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES if_oo_adt_classrun.
    METHODS:
      create_transaction_data RETURNING VALUE(rv_success) TYPE abap_bool,
      flush_transaction_data RETURNING VALUE(rv_success) TYPE abap_bool.

  PRIVATE SECTION.
    METHODS:
      generate_transaction
        IMPORTING
          iv_credit_card    TYPE zcredit_card
          iv_transaction_id TYPE string
        RETURNING VALUE(rs_trans) TYPE ztransaction_cr,
      validate_transaction
        IMPORTING
          is_transaction  TYPE ztransaction_cr
          iv_total_spent  TYPE p
          iv_max_spent    TYPE p
        RETURNING VALUE(rv_valid) TYPE abap_bool.
ENDCLASS.

CLASS zcust_credit_transaction IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.
    out->write( 'Starting transaction data generation' ).
    IF NOT flush_transaction_data( ).
      out->write( 'Failed to flush existing transaction data' ).
      RETURN.
    ENDIF.
    IF create_transaction_data( ).
      out->write( 'Transaction data inserted successfully' ).
    ELSE.
      out->write( 'Failed to insert transaction data' ).
    ENDIF.
  ENDMETHOD.

  METHOD create_transaction_data.
    DATA: lt_transactions TYPE TABLE OF ztransaction_cr,
          lt_credit_cards TYPE TABLE OF zcredit_card,
          lv_total_spent TYPE p DECIMALS 2,
          lv_max_spent TYPE p DECIMALS 2,
          lv_limit_factor TYPE p DECIMALS 2 VALUE '0.55',
          lv_tr_count TYPE i,
          lv_tr_counter TYPE i VALUE 1,
          o_rand_tr_count TYPE REF TO cl_abap_random_int,
          o_rand_tr_date TYPE REF TO cl_abap_random_int,
          o_rand_amount TYPE REF TO cl_abap_random_int,
          lv_transaction_id TYPE string.

    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 2 max = 6 RECEIVING prng = o_rand_tr_count ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 1 max = 365 RECEIVING prng = o_rand_tr_date ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 500 max = 10000 RECEIVING prng = o_rand_amount ).

    SELECT * FROM zcredit_card INTO TABLE @lt_credit_cards.
    IF lt_credit_cards IS INITIAL.
      rv_success = abap_false.
      RETURN.
    ENDIF.

    LOOP AT lt_credit_cards INTO DATA(ls_credit_card).
      lv_total_spent = 0.
      lv_max_spent = ls_credit_card-cr_limit * lv_limit_factor.
      lv_tr_count = o_rand_tr_count->get_next( ).

      DO lv_tr_count TIMES.
        lv_transaction_id = |T{ lv_tr_counter WIDTH = 4 PAD = '0' }|.

        DATA(ls_transaction) = generate_transaction(
          iv_credit_card = ls_credit_card
          iv_transaction_id = lv_transaction_id
        ).

        IF validate_transaction(
             is_transaction = ls_transaction
             iv_total_spent = lv_total_spent
             iv_max_spent = lv_max_spent
           ).
          APPEND ls_transaction TO lt_transactions.
          lv_total_spent = lv_total_spent + ls_transaction-amount.
          lv_tr_counter = lv_tr_counter + 1.
        ENDIF.
      ENDDO.
    ENDLOOP.

    IF lt_transactions IS NOT INITIAL.
      INSERT ztransaction_cr FROM TABLE @lt_transactions ACCEPTING DUPLICATE KEYS.
      rv_success = xsdbool( sy-subrc = 0 ).
    ELSE.
      rv_success = abap_false.
    ENDIF.
  ENDMETHOD.

  METHOD flush_transaction_data.
    DELETE FROM ztransaction_cr.
    rv_success = xsdbool( sy-subrc = 0 OR sy-subrc = 4 ).
  ENDMETHOD.

  METHOD generate_transaction.
    DATA: o_rand_date TYPE REF TO cl_abap_random_int,
          o_rand_amount TYPE REF TO cl_abap_random_int,
          lv_id TYPE zcredit_card-id.

    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 1 max = 365 RECEIVING prng = o_rand_date ).
    cl_abap_random_int=>create( EXPORTING seed = cl_abap_random=>seed( ) min = 500 max = 10000 RECEIVING prng = o_rand_amount ).

    SELECT SINGLE id FROM zcredit_card WHERE cr_no = @iv_credit_card-cr_no into @lv_id.

    rs_trans-client = sy-mandt.
    rs_trans-tr_no = iv_transaction_id.
    rs_trans-id = lv_id.
    rs_trans-cr_no = iv_credit_card-cr_no.
    rs_trans-tr_date = sy-datum - o_rand_date->get_next( ).
    rs_trans-amount = o_rand_amount->get_next( ).
    rs_trans-currency = iv_credit_card-currency.
  ENDMETHOD.

  METHOD validate_transaction.
    rv_valid = xsdbool( iv_total_spent + is_transaction-amount <= iv_max_spent ).
  ENDMETHOD.

ENDCLASS.

======================================================================================================================================================

CLASS ZCL_AMDP_TF DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES IF_AMDP_MARKER_HDB.
    CLASS-METHODS GET_CREDIT_RISK
      FOR TABLE FUNCTION ZAMDP_TF1.

ENDCLASS.

CLASS ZCL_AMDP_TF IMPLEMENTATION.

  METHOD GET_CREDIT_RISK BY DATABASE FUNCTION
    FOR HDB LANGUAGE SQLSCRIPT
    OPTIONS READ-ONLY
    USING zcustomer_master zcredit_card ztransaction_cr.

    RETURN
      SELECT
        c.client,
        c.id,
        c.name,
        COALESCE(SUM(cr.cr_limit), 0) AS total_limit,
        COALESCE(SUM(tr.amount), 0) AS limit_used,
        COALESCE(SUM(cr.cr_limit), 0) - COALESCE(SUM(tr.amount), 0) AS limit_left,
        cr.currency,
        CASE
          WHEN (COALESCE(SUM(tr.amount), 0) / NULLIF(COALESCE(SUM(cr.cr_limit), 0), 0)) * 100 > 75
            THEN 'High'
          WHEN (COALESCE(SUM(tr.amount), 0) / NULLIF(COALESCE(SUM(cr.cr_limit), 0), 0)) * 100 > 45
            THEN 'Medium'
          ELSE 'Low'
        END AS risk_factor,
        ROUND(((COALESCE(SUM(cr.cr_limit), 0) - COALESCE(SUM(tr.amount), 0)) /
              NULLIF(COALESCE(SUM(cr.cr_limit), 0), 0)) * 100, 4) AS credit_score
      FROM zcustomer_master AS c
      LEFT JOIN zcredit_card AS cr
        ON c.client = cr.client AND c.id = cr.id
      LEFT JOIN ztransaction_cr AS tr
        ON c.client = tr.client AND cr.id = tr.id AND cr.cr_no = tr.cr_no
      GROUP BY c.client, c.id, c.name, cr.currency;

  ENDMETHOD.

ENDCLASS.

========================================================================================================================================================

@EndUserText.label: 'AMDP TF'
define table function Zamdp_tf1
returns
{
  client        : abap.clnt;
  id            : abap.char(5);
  name          : abap.char(30);
  total_limit   : abap.curr(15,2);
  limit_used    : abap.curr(15,2);
  limit_left    : abap.curr(15,2);
  currency      : abap.cuky;
  risk_factor   : abap.char(10);
  credit_score  : abap.dec(7,4); 
}
implemented by method
  ZCL_AMDP_TF=>GET_CREDIT_RISK;


========================================================================================================================================================

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'AMDP VIEW1'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity Zamdp_VIEW1 as select from Zamdp_tf1
{
    id,
    name,
    @Semantics.amount.currencyCode: 'currency'
    total_limit,
    @Semantics.amount.currencyCode: 'currency'
    limit_used,
    @Semantics.amount.currencyCode: 'currency'
    limit_left,
    risk_factor,
    currency,
    credit_score
}

========================================================================================================================================================

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'BASIC CUSTOMER VIEW'
@Metadata.ignorePropagatedAnnotations: true
define root view entity ZI_CUSTOMER_PARENT
  as select from zcustomer_master
  composition [0..*] of ZICredit_child1 as _credit
  association [1..*] to Zamdp_VIEW1  as _amdp on  $projection.Id     = _amdp.id
                                            
{ 
  key id      as Id,
      name    as Name,
      address as Address,
      @Semantics.amount.currencyCode: 'currency'
      _amdp.total_limit as Total_Limit,
      @Semantics.amount.currencyCode: 'currency'
      _amdp.limit_used as Limit_used,
      @Semantics.amount.currencyCode: 'currency'
      _amdp.limit_left as Limit_left,
      _amdp.currency as Currency,
      _amdp.credit_score as Credit_Score,
      _amdp.risk_factor as Risk,
      _credit
}

========================================================================================================================================================

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Credit Child View'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZICredit_child1
  as select from zcredit_card
  composition [0..*] of ZITRANSACTION_child1 as _trans
  association to parent ZI_CUSTOMER_PARENT   as _CUST on $projection.Id = _CUST.Id
{
  key id         as Id,
  key cr_no      as Card_no,
      issue_date as Issue_Date,
      @Semantics.amount.currencyCode : 'Currency'
      cr_limit   as Credit_Limit,
      currency   as Currency,
      _CUST,
      _trans
}


========================================================================================================================================================

@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'TRANSACTION CHILD VIEW'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
define view entity ZITRANSACTION_child1
  as select from ztransaction_cr
  association to parent ZICredit_child1 as _credit on  $projection.Cr_No = _credit.Card_no
                                                   and $projection.Id    = _credit.Id
{
  key id       as Id,
  key cr_no    as Cr_No,
  key tr_no    as Tr_No,
      tr_date  as Tr_Date,
      @Semantics.amount.currencyCode : 'Currency'
      amount   as Amount,
      currency as Currency,
      _credit.Id as crid,
      _credit._CUST,
      _credit
}


========================================================================================================================================================

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Customer Projection View'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
define root view entity ZC_CUSTOMER_PARENT
  provider contract transactional_query
  as projection on ZI_CUSTOMER_PARENT
{
  key Id,
      Name,
      Address,
      @Semantics.amount.currencyCode: 'currency'
      Total_Limit,
      @Semantics.amount.currencyCode: 'currency'
      Limit_used,
      @Semantics.amount.currencyCode: 'currency'
      Limit_left,
      Currency,
      Credit_Score,
      Risk,
      /* Associations */
      _credit : redirected to composition child ZC_CREDIT_CHILD
}


========================================================================================================================================================

@Metadata.layer: #CORE
annotate entity ZC_CUSTOMER_PARENT with
{
  @UI.facet: [
      {
          id: 'Customer_Details',
          purpose: #STANDARD,
          type: #IDENTIFICATION_REFERENCE,
          label: 'Customer Details',
          position: 10
      },
//      {
//          id: 'Credit_Overview',
//          purpose: #STANDARD,
//          type: #IDENTIFICATION_REFERENCE,
//          label: 'Credit Overview',
//          position: 30
//      },
      {
          id: 'Credit_Details',
          purpose: #STANDARD,
          type: #LINEITEM_REFERENCE,
          label: 'Credit Details',
          position: 40,
          targetElement: '_credit'
      }
  ]

  // === Fields to show in both List and Object Page ===
  @UI.identification: [{ position: 10 }]
  @UI.lineItem: [{ position: 10 }]
  @UI.selectionField: [{ position: 10 }]
  @EndUserText.label: 'ID'
  Id;

  @UI.identification: [{ position: 20 }]
  @UI.lineItem: [{ position: 15 }]
  @UI.selectionField: [{ position: 20 }]
  @EndUserText.label: 'Name'
  Name;

  @UI.identification: [{ position: 30 }]
  @UI.lineItem: [{ position: 20 }]
  @EndUserText.label: 'Address'
  Address;

  //@UI.identification: [{ position: 40 }]
  @UI.lineItem: [{ position: 25 }]
  @EndUserText.label: 'Score(%)'
  Credit_Score;

  //@UI.identification: [{ position: 50 }]
  @UI.lineItem: [{ position: 30 }]
  @EndUserText.label: 'Risk Level'
  Risk;

  // === Fields only for Object Page ===
  //@UI.identification: [{ position: 60 }]
  @EndUserText.label: 'Total Credit'
  Total_Limit;

  //@UI.identification: [{ position: 70 }]
  @EndUserText.label: 'Used Credit'
  Limit_used;

  //@UI.identification: [{ position: 80 }]
  @EndUserText.label: 'Available Credit'
  Limit_left;

  //@UI.identification: [{ position: 90 }]
  @EndUserText.label: 'Currency'
  Currency;

  // === Association to Credit Child (Object Page only) ===
  @UI.lineItem: [{ position: 100 }]
  @EndUserText.label: 'Credit Information'
  _credit;
}

========================================================================================================================================================

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Credit Child Projection View'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
define view entity ZC_CREDIT_CHILD as projection on ZICredit_child1
{
    key Id,
    key Card_no,
    Issue_Date,
    @Semantics.amount.currencyCode : 'Currency'
    Credit_Limit,
    Currency,
    /* Associations */
    _CUST : redirected to parent ZC_CUSTOMER_PARENT,
    _trans : redirected to composition child ZC_TRANSACTION_CHILD
}

========================================================================================================================================================

@Metadata.layer: #CORE
annotate entity ZC_CREDIT_CHILD with
{
  @UI.facet: [
      {
          id: 'Credit_Details',
          purpose: #STANDARD,
          type: #IDENTIFICATION_REFERENCE,
          label: 'Credit Card Details',
          position: 5
      },
      {
          id: 'Transaction_History',
          purpose: #STANDARD,
          type: #LINEITEM_REFERENCE,
          label: 'Transaction History',
          position: 15,
          targetElement: '_trans'
      },
      {
          id: 'Customer_Association',
          purpose: #STANDARD,
          type: #LINEITEM_REFERENCE,
          label: 'Customer Details',
          position: 25,
          targetElement: '_CUST'
      }
  ]

  @UI.identification: [{ position: 10 }]
  @UI.lineItem: [{ position: 10 }]
  @UI.selectionField: [{ position: 10 }]
  @EndUserText.label: 'Credit ID'
  Id;

  @UI.identification: [{ position: 20 }]
  @UI.lineItem: [{ position: 20 }]
  @UI.selectionField: [{ position: 20 }]
  @EndUserText.label: 'Card Number'
  Card_no;

  @UI.identification: [{ position: 30 }]
  @UI.lineItem: [{ position: 30 }]
  @EndUserText.label: 'Issue Date'
  Issue_Date;

  @UI.identification: [{ position: 40 }]
  @UI.lineItem: [{ position: 40 }]
  @EndUserText.label: 'Credit Limit'
  Credit_Limit;

  @UI.identification: [{ position: 50 }]
  @UI.lineItem: [{ position: 50 }]
  @EndUserText.label: 'Currency'
  Currency;

  /* Associations */
  @UI.lineItem: [{ position: 60 }]
  @EndUserText.label: 'Customer'
  _CUST;

  @UI.lineItem: [{ position: 70 }]
  @EndUserText.label: 'Transactions'
  _trans;
}

========================================================================================================================================================

@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'TRANSACTION CHILD Projection VIEW'
@Metadata.ignorePropagatedAnnotations: true
@Metadata.allowExtensions: true
define view entity ZC_TRANSACTION_CHILD as projection on ZITRANSACTION_child1
{
    key Id,
    key Cr_No,
    key Tr_No,
    Tr_Date,
    @Semantics.amount.currencyCode : 'Currency'
    Amount,
    Currency,
    crid,
    /* Associations */
    _CUST : redirected to ZC_CUSTOMER_PARENT,
    _credit : redirected to parent ZC_CREDIT_CHILD
}

========================================================================================================================================================

@Metadata.layer: #CORE
annotate entity ZC_TRANSACTION_CHILD with
{
  @UI.facet: [
      {
          id: 'Transaction_Details',
          purpose: #STANDARD,
          type: #IDENTIFICATION_REFERENCE,
          label: 'Transaction Details',
          position: 5
      },
      {
          id: 'Credit_Association',
          purpose: #STANDARD,
          type: #LINEITEM_REFERENCE,
          label: 'Credit Details',
          position: 15,
          targetElement: '_credit'
      }
  ]

  @UI.identification: [{ position: 10 }]
  @UI.lineItem: [{ position: 10 }]
  @UI.selectionField: [{ position: 10 }]
  @EndUserText.label: 'Credit Number'
  Cr_No;

  @UI.identification: [{ position: 20 }]
  @UI.lineItem: [{ position: 20 }]
  @UI.selectionField: [{ position: 20 }]
  @EndUserText.label: 'Transaction Number'
  Tr_No;

  @UI.identification: [{ position: 30 }]
  @UI.lineItem: [{ position: 30 }]
  @EndUserText.label: 'Transaction Date'
  Tr_Date;

  @UI.identification: [{ position: 40 }]
  @UI.lineItem: [{ position: 40 }]
  @EndUserText.label: 'Amount'
  Amount;

  @UI.identification: [{ position: 50 }]
  @UI.lineItem: [{ position: 50 }]
  @EndUserText.label: 'Currency'
  Currency;

  /* Associations */
  @UI.lineItem: [{ position: 60 }]
  @EndUserText.label: 'Credit Details'
  _credit;
}

========================================================================================================================================================

managed implementation in class zbp_i_customer_parent unique;
strict ( 2 );

define behavior for ZI_CUSTOMER_PARENT //alias <alias_name>
persistent table zcustomer_master
lock master
authorization master ( instance )
//etag master <field_name>
{
  create;
  update;
  delete;
  field ( mandatory : create, readonly : update ) Id;
  association _credit { create; }

  mapping for zcustomer_master{
  Id = id;
  Name = name;
  Address = address;
  }
}

define behavior for ZICredit_child1 //alias <alias_name>
persistent table zcredit_card
lock dependent by _CUST
authorization dependent by _CUST
//etag master <field_name>
{
  update;
  delete;
  field ( mandatory : create, readonly : update ) Id, Card_no;
  association _CUST;
  association _trans { create; }

  mapping for zcredit_card{
  Id = id;
  Card_no = cr_no;
  Issue_Date = issue_date;
  Credit_Limit = cr_limit;
  Currency = currency;
  }
}

define behavior for ZITRANSACTION_child1 //alias <alias_name>
persistent table ztransaction_cr
lock dependent by _CUST
authorization dependent by _CUST
//etag master <field_name>
{
  update;
  delete;
  field ( mandatory : create, readonly : update ) Id, Cr_No, Tr_No;
  field ( readonly:update ) CrID;
  association _CUST;
  association _credit;

  mapping for Ztransaction_Cr{
  Id = id;
  Cr_No = cr_no;
  Tr_No = tr_no;
  Tr_Date = tr_date;
  Amount = amount;
  Currency = currency;
  }
}

========================================================================================================================================================

projection;
strict ( 2 );

define behavior for ZC_CUSTOMER_PARENT //alias <alias_name>
{
  use create;
  use update;
  use delete;

  use association _credit { create; }
}

define behavior for ZC_CREDIT_CHILD //alias <alias_name>
{
  use update;
  use delete;

  use association _CUST;
  use association _trans { create; }
}

define behavior for ZC_TRANSACTION_CHILD //alias <alias_name>
{
  use update;
  use delete;

  use association _CUST;
  use association _credit;
}

========================================================================================================================================================

@EndUserText.label: 'Customer Service Definition'
define service ZCUSTOMER_SRC_DF {
  expose ZC_CUSTOMER_PARENT;
  expose ZC_CREDIT_CHILD;
  expose ZC_TRANSACTION_CHILD;
}

========================================================================================================================================================


  
